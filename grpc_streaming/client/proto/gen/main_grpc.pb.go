// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/main.proto

package mainpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Calculate_Add_FullMethodName               = "/calculator.Calculate/Add"
	Calculate_GenerateFibonacci_FullMethodName = "/calculator.Calculate/GenerateFibonacci"
	Calculate_SendNumbers_FullMethodName       = "/calculator.Calculate/SendNumbers"
)

// CalculateClient is the client API for Calculate service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculateClient interface {
	Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	GenerateFibonacci(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FibonacciResponse], error)
	SendNumbers(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NumberRequest, NumberResponse], error)
}

type calculateClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculateClient(cc grpc.ClientConnInterface) CalculateClient {
	return &calculateClient{cc}
}

func (c *calculateClient) Add(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddResponse)
	err := c.cc.Invoke(ctx, Calculate_Add_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculateClient) GenerateFibonacci(ctx context.Context, in *FibonacciRequest, opts ...grpc.CallOption) (grpc.ServerStreamingClient[FibonacciResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Calculate_ServiceDesc.Streams[0], Calculate_GenerateFibonacci_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[FibonacciRequest, FibonacciResponse]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Calculate_GenerateFibonacciClient = grpc.ServerStreamingClient[FibonacciResponse]

func (c *calculateClient) SendNumbers(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[NumberRequest, NumberResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Calculate_ServiceDesc.Streams[1], Calculate_SendNumbers_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[NumberRequest, NumberResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Calculate_SendNumbersClient = grpc.ClientStreamingClient[NumberRequest, NumberResponse]

// CalculateServer is the server API for Calculate service.
// All implementations must embed UnimplementedCalculateServer
// for forward compatibility.
type CalculateServer interface {
	Add(context.Context, *AddRequest) (*AddResponse, error)
	GenerateFibonacci(*FibonacciRequest, grpc.ServerStreamingServer[FibonacciResponse]) error
	SendNumbers(grpc.ClientStreamingServer[NumberRequest, NumberResponse]) error
	mustEmbedUnimplementedCalculateServer()
}

// UnimplementedCalculateServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCalculateServer struct{}

func (UnimplementedCalculateServer) Add(context.Context, *AddRequest) (*AddResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Add not implemented")
}
func (UnimplementedCalculateServer) GenerateFibonacci(*FibonacciRequest, grpc.ServerStreamingServer[FibonacciResponse]) error {
	return status.Errorf(codes.Unimplemented, "method GenerateFibonacci not implemented")
}
func (UnimplementedCalculateServer) SendNumbers(grpc.ClientStreamingServer[NumberRequest, NumberResponse]) error {
	return status.Errorf(codes.Unimplemented, "method SendNumbers not implemented")
}
func (UnimplementedCalculateServer) mustEmbedUnimplementedCalculateServer() {}
func (UnimplementedCalculateServer) testEmbeddedByValue()                   {}

// UnsafeCalculateServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculateServer will
// result in compilation errors.
type UnsafeCalculateServer interface {
	mustEmbedUnimplementedCalculateServer()
}

func RegisterCalculateServer(s grpc.ServiceRegistrar, srv CalculateServer) {
	// If the following call pancis, it indicates UnimplementedCalculateServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Calculate_ServiceDesc, srv)
}

func _Calculate_Add_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculateServer).Add(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Calculate_Add_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculateServer).Add(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Calculate_GenerateFibonacci_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FibonacciRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CalculateServer).GenerateFibonacci(m, &grpc.GenericServerStream[FibonacciRequest, FibonacciResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Calculate_GenerateFibonacciServer = grpc.ServerStreamingServer[FibonacciResponse]

func _Calculate_SendNumbers_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CalculateServer).SendNumbers(&grpc.GenericServerStream[NumberRequest, NumberResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Calculate_SendNumbersServer = grpc.ClientStreamingServer[NumberRequest, NumberResponse]

// Calculate_ServiceDesc is the grpc.ServiceDesc for Calculate service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Calculate_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculator.Calculate",
	HandlerType: (*CalculateServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Add",
			Handler:    _Calculate_Add_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GenerateFibonacci",
			Handler:       _Calculate_GenerateFibonacci_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SendNumbers",
			Handler:       _Calculate_SendNumbers_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/main.proto",
}
